namespace Iql
{
    public class Iql
    {
        private static bool ExpressionTypesDelayedInitialized;
        private static EnumMapper<IqlExpressionKind> ExpressionTypesDelayed;
        public static EnumMapper<IqlExpressionKind> ExpressionTypes { get { if(!ExpressionTypesDelayedInitialized) { ExpressionTypesDelayedInitialized = true; ExpressionTypesDelayed = new EnumMapper<IqlExpressionKind>()
            .Map(() => IqlExpressionKind.Aggregate)
            .Map(() => IqlExpressionKind.Parenthesis)
            .Map(() => IqlExpressionKind.And)
            .Map(() => IqlExpressionKind.Or)
            .Map(() => IqlExpressionKind.IsGreaterThan)
            .Map(() => IqlExpressionKind.IsGreaterThanOrEqualTo)
            .Map(() => IqlExpressionKind.IsLessThan)
            .Map(() => IqlExpressionKind.IsLessThanOrEqualTo)
            .Map(() => IqlExpressionKind.Assign)
            .Map(() => IqlExpressionKind.IsEqualTo)
            .Map(() => IqlExpressionKind.IsNotEqualTo)
            .Map(() => IqlExpressionKind.Not)
            .Map(() => IqlExpressionKind.Modulo)
            .Map(() => IqlExpressionKind.ModuloEquals)
            .Map(() => IqlExpressionKind.Add)
            .Map(() => IqlExpressionKind.Subtract)
            .Map(() => IqlExpressionKind.Multiply)
            .Map(() => IqlExpressionKind.Divide)
            .Map(() => IqlExpressionKind.AddEquals)
            .Map(() => IqlExpressionKind.SubtractEquals)
            .Map(() => IqlExpressionKind.MultiplyEquals)
            .Map(() => IqlExpressionKind.DivideEquals)
            .Map(() => IqlExpressionKind.BitwiseOr)
            .Map(() => IqlExpressionKind.Has)
            .Map(() => IqlExpressionKind.BitwiseNot)
            .Map(() => IqlExpressionKind.Literal)
            .Map(() => IqlExpressionKind.UnarySubtract)
            .Map(() => IqlExpressionKind.RootReference)
            .Map(() => IqlExpressionKind.Variable)
            .Map(() => IqlExpressionKind.Property)
            .Map(() => IqlExpressionKind.StringIncludes)
            .Map(() => IqlExpressionKind.StringIndexOf)
            .Map(() => IqlExpressionKind.StringSubString)
            .Map(() => IqlExpressionKind.StringToUpperCase)
            .Map(() => IqlExpressionKind.StringToLowerCase)
            .Map(() => IqlExpressionKind.StringTrim)
            .Map(() => IqlExpressionKind.StringEndsWith)
            .Map(() => IqlExpressionKind.StringStartsWith)
            .Map(() => IqlExpressionKind.StringConcat)
            .Map(() => IqlExpressionKind.ToString)
            .Map(() => IqlExpressionKind.Now)
            .Map(() => IqlExpressionKind.Any)
            .Map(() => IqlExpressionKind.All)
            .Map(() => IqlExpressionKind.Count)
; } return ExpressionTypesDelayed; } set { ExpressionTypesDelayedInitialized = true; ExpressionTypesDelayed = value; } }
    }
}