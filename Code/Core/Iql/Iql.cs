namespace Iql
{
    public class Iql
    {
        public static EnumMapper<IqlExpressionType> ExpressionTypes = new EnumMapper<IqlExpressionType>()
            .Map(() => IqlExpressionType.Aggregate)
            .Map(() => IqlExpressionType.Parenthesis)
            .Map(() => IqlExpressionType.And)
            .Map(() => IqlExpressionType.Or)
            .Map(() => IqlExpressionType.IsGreaterThan)
            .Map(() => IqlExpressionType.IsGreaterThanOrEqualTo)
            .Map(() => IqlExpressionType.IsLessThan)
            .Map(() => IqlExpressionType.IsLessThanOrEqualTo)
            .Map(() => IqlExpressionType.Assign)
            .Map(() => IqlExpressionType.IsEqualTo)
            .Map(() => IqlExpressionType.IsNotEqualTo)
            .Map(() => IqlExpressionType.Not)
            .Map(() => IqlExpressionType.Modulo)
            .Map(() => IqlExpressionType.ModuloEquals)
            .Map(() => IqlExpressionType.Add)
            .Map(() => IqlExpressionType.Subtract)
            .Map(() => IqlExpressionType.Multiply)
            .Map(() => IqlExpressionType.Divide)
            .Map(() => IqlExpressionType.AddEquals)
            .Map(() => IqlExpressionType.SubtractEquals)
            .Map(() => IqlExpressionType.MultiplyEquals)
            .Map(() => IqlExpressionType.DivideEquals)
            .Map(() => IqlExpressionType.BitwiseOr)
            .Map(() => IqlExpressionType.Has)
            .Map(() => IqlExpressionType.BitwiseNot)
            .Map(() => IqlExpressionType.Literal)
            .Map(() => IqlExpressionType.UnarySubtract)
            .Map(() => IqlExpressionType.RootReference)
            .Map(() => IqlExpressionType.Variable)
            .Map(() => IqlExpressionType.Property)
            .Map(() => IqlExpressionType.StringIncludes)
            .Map(() => IqlExpressionType.StringIndexOf)
            .Map(() => IqlExpressionType.StringSubString)
            .Map(() => IqlExpressionType.StringToUpperCase)
            .Map(() => IqlExpressionType.StringToLowerCase)
            .Map(() => IqlExpressionType.StringTrim)
            .Map(() => IqlExpressionType.StringEndsWith)
            .Map(() => IqlExpressionType.StringStartsWith)
            .Map(() => IqlExpressionType.StringConcat)
            .Map(() => IqlExpressionType.ToString);
    }
}