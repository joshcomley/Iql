// <auto-generated />
using System;
using IqlSampleApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

namespace DCodeBrandlessIqlCodeAppsIqlSampleApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181129204510_AddedFullAddressToSite")]
    partial class AddedFullAddressToSite
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.3-alpha0003-1-Debug")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IqlSampleApp.Data.Entities.ApplicationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Kind");

                    b.Property<string>("Message");

                    b.Property<string>("Module");

                    b.HasKey("Id");

                    b.ToTable("ApplicationLogs");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("ClientId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<int>("Permissions");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UserType");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AverageIncome");

                    b.Property<double>("AverageSales");

                    b.Property<int>("Category");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<double>("Discount");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("RevisionKey");

                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("TypeId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.ClientType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ClientTypes");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.DocumentCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("RevisionKey");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("DocumentCategories");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category");

                    b.Property<int?>("ClientId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Key");

                    b.Property<int?>("LoadingId");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("RevisionKey");

                    b.Property<int?>("SiteAreaId");

                    b.Property<int?>("SiteId");

                    b.Property<string>("Title");

                    b.Property<int?>("TypeId");

                    b.HasKey("Id");

                    b.HasAlternateKey("Guid");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("LoadingId");

                    b.HasIndex("SiteAreaId");

                    b.HasIndex("SiteId");

                    b.HasIndex("TypeId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.PersonInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("DrawingNumber");

                    b.Property<DateTimeOffset>("EndTime");

                    b.Property<Guid>("Guid");

                    b.Property<int>("InspectionStatus");

                    b.Property<bool>("IsDesignRequired");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<int>("PersonId");

                    b.Property<int>("ReasonForFailure");

                    b.Property<string>("RevisionKey");

                    b.Property<int>("SiteInspectionId");

                    b.Property<DateTimeOffset>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("SiteInspectionId");

                    b.ToTable("PersonInspections");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.PersonLoading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("RevisionKey");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("PersonLoadings");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.PersonReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<int>("PersonId");

                    b.Property<string>("RevisionKey");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("PersonId");

                    b.HasIndex("TypeId");

                    b.ToTable("PersonReports");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.PersonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("RevisionKey");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("PersonTypes");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.PersonTypeMap", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<int>("TypeId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Notes");

                    b.HasKey("PersonId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("PersonTypesMap");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("RevisionKey");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.ReportActionsTaken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<int>("FaultReportId");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Notes");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("RevisionKey");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("FaultReportId");

                    b.ToTable("ReportActionsTaken");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.ReportCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("RevisionKey");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("ReportCategories");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.ReportDefaultRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("RevisionKey");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("ReportDefaultRecommendations");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.ReportReceiverEmailAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("EmailAddress");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("RevisionKey");

                    b.Property<int>("SiteId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("SiteId");

                    b.ToTable("ReportReceiverEmailAddresses");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.ReportRecommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Notes");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<int>("RecommendationId");

                    b.Property<int>("ReportId");

                    b.Property<string>("RevisionKey");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("RecommendationId");

                    b.HasIndex("ReportId");

                    b.ToTable("ReportRecommendations");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.ReportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("RevisionKey");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("ReportTypes");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.RiskAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("RevisionKey");

                    b.Property<int>("SiteInspectionId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("SiteInspectionId");

                    b.ToTable("RiskAssessments");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.RiskAssessmentAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("PrecautionsToControlHazard");

                    b.Property<int>("QuestionId");

                    b.Property<string>("RevisionKey");

                    b.Property<string>("SpecificHazard");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("QuestionId");

                    b.ToTable("RiskAssessmentAnswers");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.RiskAssessmentQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<string>("Name");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("RevisionKey");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("RiskAssessmentQuestions");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.RiskAssessmentSolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("RevisionKey");

                    b.Property<int>("RiskAssessmentId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("RiskAssessmentId")
                        .IsUnique();

                    b.ToTable("RiskAssessmentSolutions");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<Polygon>("Area");

                    b.Property<int?>("ClientId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("FullAddress");

                    b.Property<Guid>("Guid");

                    b.Property<int>("Left");

                    b.Property<LineString>("Line");

                    b.Property<Point>("Location");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("PostCode");

                    b.Property<string>("RevisionKey");

                    b.Property<int>("Right");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ParentId");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.SiteArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("RevisionKey");

                    b.Property<int>("SiteId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("SiteId");

                    b.ToTable("SiteAreas");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.SiteDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("RevisionKey");

                    b.Property<int>("SiteId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("SiteId");

                    b.ToTable("SiteDocuments");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.SiteInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<DateTimeOffset>("EndTime");

                    b.Property<Guid>("Guid");

                    b.Property<Guid>("PersistenceKey");

                    b.Property<string>("RevisionKey");

                    b.Property<int>("SiteId");

                    b.Property<DateTimeOffset>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("SiteId");

                    b.ToTable("SiteInspections");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.UserSite", b =>
                {
                    b.Property<int>("SiteId");

                    b.Property<string>("UserId");

                    b.HasKey("SiteId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSites");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.ApplicationUser", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.Client", "Client")
                        .WithMany("Users")
                        .HasForeignKey("ClientId");

                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.Client", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("ClientsCreated")
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("IqlSampleApp.Data.Entities.ClientType", "Type")
                        .WithMany("Clients")
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.DocumentCategory", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("DocumentCategoriesCreated")
                        .HasForeignKey("CreatedByUserId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.Person", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.Client", "Client")
                        .WithMany("People")
                        .HasForeignKey("ClientId");

                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("PeopleCreated")
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("IqlSampleApp.Data.Entities.PersonLoading", "Loading")
                        .WithMany("People")
                        .HasForeignKey("LoadingId");

                    b.HasOne("IqlSampleApp.Data.Entities.SiteArea", "SiteArea")
                        .WithMany("People")
                        .HasForeignKey("SiteAreaId");

                    b.HasOne("IqlSampleApp.Data.Entities.Site", "Site")
                        .WithMany("People")
                        .HasForeignKey("SiteId");

                    b.HasOne("IqlSampleApp.Data.Entities.PersonType", "Type")
                        .WithMany("People")
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.PersonInspection", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("PersonInspectionsCreated")
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("IqlSampleApp.Data.Entities.SiteInspection", "SiteInspection")
                        .WithMany("PersonInspections")
                        .HasForeignKey("SiteInspectionId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.PersonLoading", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("PersonLoadingsCreated")
                        .HasForeignKey("CreatedByUserId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.PersonReport", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("FaultReportsCreated")
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("IqlSampleApp.Data.Entities.Person", "Person")
                        .WithMany("Reports")
                        .HasForeignKey("PersonId");

                    b.HasOne("IqlSampleApp.Data.Entities.ReportType", "Type")
                        .WithMany("FaultReports")
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.PersonType", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("PersonTypesCreated")
                        .HasForeignKey("CreatedByUserId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.PersonTypeMap", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.Person", "Person")
                        .WithMany("Types")
                        .HasForeignKey("PersonId");

                    b.HasOne("IqlSampleApp.Data.Entities.PersonType", "Type")
                        .WithMany("PeopleMap")
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.Project", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("ProjectCreated")
                        .HasForeignKey("CreatedByUserId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.ReportActionsTaken", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("FaultActionsTakenCreated")
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("IqlSampleApp.Data.Entities.PersonReport", "PersonReport")
                        .WithMany("ActionsTaken")
                        .HasForeignKey("FaultReportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.ReportCategory", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("FaultCategoriesCreated")
                        .HasForeignKey("CreatedByUserId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.ReportDefaultRecommendation", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("FaultDefaultRecommendationsCreated")
                        .HasForeignKey("CreatedByUserId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.ReportReceiverEmailAddress", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("ReportReceiverEmailAddressesCreated")
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("IqlSampleApp.Data.Entities.Site", "Site")
                        .WithMany("AdditionalSendReportsTo")
                        .HasForeignKey("SiteId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.ReportRecommendation", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("FaultRecommendationsCreated")
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("IqlSampleApp.Data.Entities.ReportDefaultRecommendation", "Recommendation")
                        .WithMany("Recommendations")
                        .HasForeignKey("RecommendationId");

                    b.HasOne("IqlSampleApp.Data.Entities.PersonReport", "PersonReport")
                        .WithMany("Recommendations")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.ReportType", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ReportCategory", "Category")
                        .WithMany("ReportTypes")
                        .HasForeignKey("CategoryId");

                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("FaultTypesCreated")
                        .HasForeignKey("CreatedByUserId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.RiskAssessment", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("RiskAssessmentsCreated")
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("IqlSampleApp.Data.Entities.SiteInspection", "SiteInspection")
                        .WithMany("RiskAssessments")
                        .HasForeignKey("SiteInspectionId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.RiskAssessmentAnswer", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("RiskAssessmentAnswersCreated")
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("IqlSampleApp.Data.Entities.RiskAssessmentQuestion", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.RiskAssessmentQuestion", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("RiskAssessmentQuestionsCreated")
                        .HasForeignKey("CreatedByUserId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.RiskAssessmentSolution", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("RiskAssessmentSolutionsCreated")
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("IqlSampleApp.Data.Entities.RiskAssessment", "RiskAssessment")
                        .WithOne("RiskAssessmentSolution")
                        .HasForeignKey("IqlSampleApp.Data.Entities.RiskAssessmentSolution", "RiskAssessmentId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.Site", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.Client", "Client")
                        .WithMany("Sites")
                        .HasForeignKey("ClientId");

                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("SitesCreated")
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("IqlSampleApp.Data.Entities.Site", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.SiteArea", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("SiteAreasCreated")
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("IqlSampleApp.Data.Entities.Site", "Site")
                        .WithMany("Areas")
                        .HasForeignKey("SiteId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.SiteDocument", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.DocumentCategory", "Category")
                        .WithMany("Documents")
                        .HasForeignKey("CategoryId");

                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("SiteDocumentsCreated")
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("IqlSampleApp.Data.Entities.Site", "Site")
                        .WithMany("Documents")
                        .HasForeignKey("SiteId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.SiteInspection", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "CreatedByUser")
                        .WithMany("SiteInspectionsCreated")
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("IqlSampleApp.Data.Entities.Site", "Site")
                        .WithMany("SiteInspections")
                        .HasForeignKey("SiteId");
                });

            modelBuilder.Entity("IqlSampleApp.Data.Entities.UserSite", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.Site", "Site")
                        .WithMany("Users")
                        .HasForeignKey("SiteId");

                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser", "User")
                        .WithMany("Sites")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IqlSampleApp.Data.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
